"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var s=t[n];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(t,n,s){return n&&e(t.prototype,n),s&&e(t,s),t}}(),CanvasSequence=function(){function e(t,n,s,i,a,o,r){var u=!(arguments.length<=7||void 0===arguments[7])&&arguments[7],c=arguments.length<=8||void 0===arguments[8]?24:arguments[8];return _classCallCheck(this,e),"object"==typeof t?this.ctor(t):void this.ctor({canvas:t,sequencePath:n,sequenceStart:s,sequenceEnd:i,fileType:a,loadCallback:o,onDraw:r,autoPlay:u,fps:c})}return _createClass(e,[{key:"ctor",value:function(e){var t=e.canvas,n=e.sequencePath,s=e.sequenceStart,i=e.sequenceEnd,a=e.fileType,o=e.loadCallback,r=e.onDraw,u=e.autoPlay,c=void 0!==u&&u,h=e.fps,l=void 0===h?24:h;this.sequence=[],this.canvas=document.getElementById(t),null!==this.canvas?this.context=this.canvas.getContext("2d"):console.log("Please ensure the lib is loaded when DOM is loaded."),this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.sequencePath=n,this.sequenceStart=s,this.sequenceEnd=i,this.sequenceLength=this.sequenceEnd-this.sequenceStart,this.fileType=a||".png",this.scrollHeight=document.body.scrollHeight,this.scrollOffset=document.body.scrollTop,this.clientHeight=window.innerHeight,this.loadCallback=o||function(){},this.onDraw="function"==typeof r?r:null,this.autoPlay=c,this.isPaused=!1,this.fps=l,this.loadSequence()}},{key:"pause",value:function(){this.isPaused=!0}},{key:"play",value:function(){if(this.isPaused){var e=+new Date;this.startTime=e-this.currentFrame/this.fps*1e3,this.isPaused=!1}}},{key:"addLeadingZeros",value:function(e){for(var t=this.sequenceEnd.toString().length,n=(e>0?e:-e)+"",s="",i=t-n.length;i>0;i--)s+="0";return s+=n,e>=0?s:"-"+s}},{key:"loadSequence",value:function(){for(var e=this,t=[],n=this.sequenceStart;n<=this.sequenceEnd;n++){var s=this.addLeadingZeros(n),i=this.sequencePath+s+this.fileType,a=new Image;a.src=i;var o=new Promise(function(e,t){a.onload=e,a.onerror=t});t.push(o),this.sequence.push(a)}Promise.all(t).then(function(){e.renderFrame(),e.loadCallback()})["catch"](function(e){console.log(e)})}},{key:"getScrollFrameNumber",value:function(){var e=this.scrollOffset/(this.scrollHeight-this.clientHeight)*100,t=Math.round(e*this.sequenceLength/100);return t}},{key:"getAutoPlayFrameNumber",value:function(){return Math.round(this.fps*this.playOffset)}},{key:"getNextFrameNumber",value:function(){return this.autoPlay?this.getAutoPlayFrameNumber():this.getScrollFrameNumber()}},{key:"syncScrollPosition",value:function(){this.scrollOffset=document.body.scrollTop}},{key:"syncAutoPlayPosition",value:function(){var e=+new Date;this.startTime||(this.startTime=e,this.isPaused=!1),this.isPaused||(this.playOffset=(e-this.startTime)/1e3%(this.sequenceLength/this.fps))}},{key:"syncPlayPosition",value:function(){return this.autoPlay?this.syncAutoPlayPosition():this.syncScrollPosition()}},{key:"drawImage",value:function(e){e>=0&&e<this.sequence.length&&(this.sequence[e].complete?this.context.drawImage(this.sequence[e],0,0,this.canvas.width,this.canvas.height):console.log("The current frame has not been loaded. Please ensure all images are loaded before updating the canvas."))}},{key:"renderFrame",value:function(){var e=this;this.syncPlayPosition(),requestAnimationFrame(function(){e.renderFrame()}),this.previousFrame=this.currentFrame,this.currentFrame=this.getNextFrameNumber(),(this.currentFrame!=this.previousFrame||this.firstLoad)&&(this.drawImage(this.currentFrame),this.onDraw&&this.onDraw.call(null,this.previousFrame,this.currentFrame)),this.firstLoad=!1}}]),e}();window.requestAnimationFrame||(window.requestAnimationFrame=function(){return window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e,t){window.setTimeout(e,1e3/60)}}()),"function"==typeof define&&define.amd?define("CanvasSequence",CanvasSequence):"undefined"!=typeof module&&module.exports?module.exports=CanvasSequence:window.CanvasSequence=CanvasSequence;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
