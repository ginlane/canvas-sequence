"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var s=t[n];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(t,n,s){return n&&e(t.prototype,n),s&&e(t,s),t}}(),CanvasSequence=function(){function e(t,n,s,i,a,o,r){var u=arguments.length<=7||void 0===arguments[7]?e.PlayMode.SCROLL:arguments[7],c=arguments.length<=8||void 0===arguments[8]?24:arguments[8],h=!(arguments.length<=9||void 0===arguments[9])&&arguments[9];return _classCallCheck(this,e),"object"==typeof t?this.ctor(t):void this.ctor({canvas:t,sequencePath:n,sequenceStart:s,sequenceEnd:i,fileType:a,loadCallback:o,onDraw:r,mode:u,fps:c,playOnce:h})}return _createClass(e,[{key:"ctor",value:function(t){var n=t.canvas,s=t.sequencePath,i=t.sequenceStart,a=t.sequenceEnd,o=t.fileType,r=t.loadCallback,u=t.onDraw,c=t.mode,h=void 0===c?e.PlayMode.SCROLL:c,l=t.fps,d=void 0===l?24:l,m=t.isPaused,f=void 0!==m&&m,v=t.playOnce,y=void 0!==v&&v;this.sequence=[],this.canvas=document.getElementById(n),null!==this.canvas?this.context=this.canvas.getContext("2d"):console.log("Please ensure the lib is loaded when DOM is loaded."),this.sequencePath=s,this.sequenceStart=i,this.sequenceEnd=a,this.sequenceLength=this.sequenceEnd-this.sequenceStart,this.fileType=o||".png",this.progress=0,this.scrollHeight=document.body.scrollHeight,this.loadCallback=r||function(){},this.onDraw="function"==typeof u?u:null,this.mode=h,this.isPaused=f,this.firstLoopEnd=!1,this.fps=d,this.playOnce=y,this.loadSequence()}},{key:"pause",value:function(){this.isPaused=!0}},{key:"play",value:function(){if(this.isPaused){var e=+new Date;this.startTime=e-this.currentFrame/this.fps*1e3,this.isPaused=!1,this.firstLoopEnd=!1}}},{key:"addLeadingZeros",value:function(e){for(var t=this.sequenceEnd.toString().length,n=(e>0?e:-e)+"",s="",i=t-n.length;i>0;i--)s+="0";return s+=n,e>=0?s:"-"+s}},{key:"loadSequence",value:function(){for(var e=this,t=[],n=this.sequenceStart;n<=this.sequenceEnd;n++){var s=this.addLeadingZeros(n),i=this.sequencePath+s+this.fileType,a=new Image;a.src=i;var o=new Promise(function(e,t){a.onload=e,a.onerror=t});t.push(o),this.sequence.push(a)}Promise.all(t).then(function(){e.renderFrame(),e.loadCallback()})["catch"](function(e){console.log(e)})}},{key:"getNextFrameNumber",value:function(){return Math.min(this.sequenceLength,Math.max(0,Math.round(this.progress*this.sequenceLength)))}},{key:"syncScrollPosition",value:function(){var e=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0;return e/this.scrollHeight}},{key:"syncAutoPlayPosition",value:function(){var e=+new Date;if(this.startTime||(this.startTime=e),!this.isPaused){var t=this.sequenceLength/this.fps,n=(e-this.startTime)/1e3%t;return n/t}return this.progress}},{key:"syncPlayPosition",value:function(){switch(this.mode){case e.PlayMode.AUTO:this.progress=this.syncAutoPlayPosition();break;case e.PlayMode.MANUAL:break;case e.PlayMode.SCROLL:default:this.progress=this.syncScrollPosition()}}},{key:"setProgress",value:function(t){this.progress=t,this.mode===e.PlayMode.MANUAL&&requestAnimationFrame(this.renderFrame.bind(this))}},{key:"drawImage",value:function(e){e>=0&&e<this.sequence.length&&(this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.sequence[e].complete?this.context.drawImage(this.sequence[e],0,0,this.canvas.width,this.canvas.height):console.log("The current frame has not been loaded. Please ensure all images are loaded before updating the canvas."))}},{key:"renderFrame",value:function(){this.syncPlayPosition(),this.playOnce&&this.firstLoopEnd&&this.pause(),this.mode!==e.PlayMode.MANUAL&&requestAnimationFrame(this.renderFrame.bind(this)),this.previousFrame=this.currentFrame,this.currentFrame=this.getNextFrameNumber(),(this.currentFrame!=this.previousFrame||this.firstLoad)&&(this.drawImage(this.currentFrame),this.onDraw&&this.onDraw.call(null,this.previousFrame,this.currentFrame)),this.getNextFrameNumber()===this.sequenceEnd-1&&(this.firstLoopEnd=!0),this.firstLoad=!1}}]),e}();CanvasSequence.PlayMode={SCROLL:"SCROLL",AUTO:"AUTO",MANUAL:"MANUAL"},window.requestAnimationFrame||(window.requestAnimationFrame=function(){return window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e,t){window.setTimeout(e,1e3/60)}}()),"function"==typeof define&&"object"==typeof define.amd&&define.amd?define(function(){return CanvasSequence}):"undefined"!=typeof module&&module.exports?module.exports=CanvasSequence:window.CanvasSequence=CanvasSequence;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
