"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var s=t[n];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(t,n,s){return n&&e(t.prototype,n),s&&e(t,s),t}}(),CanvasSequence=function(){function e(t,n,s,i,a,o,r){var u=arguments.length<=7||void 0===arguments[7]?e.PlayMode.SCROLL:arguments[7],c=arguments.length<=8||void 0===arguments[8]?24:arguments[8],h=!(arguments.length<=9||void 0===arguments[9])&&arguments[9];return _classCallCheck(this,e),"object"==typeof t?this.ctor(t):void this.ctor({canvas:t,sequencePath:n,sequenceStart:s,sequenceEnd:i,fileType:a,loadCallback:o,onDraw:r,mode:u,fps:c,playOnce:h})}return _createClass(e,[{key:"ctor",value:function(t){var n=t.canvas,s=t.sequencePath,i=t.sequenceStart,a=t.sequenceEnd,o=t.fileType,r=t.loadCallback,u=t.onDraw,c=t.mode,h=void 0===c?e.PlayMode.SCROLL:c,l=t.fps,d=void 0===l?24:l,f=t.isPaused,m=void 0!==f&&f,v=t.playOnce,y=void 0!==v&&v;this.sequence=[],this.canvas=document.getElementById(n),null!==this.canvas?this.context=this.canvas.getContext("2d"):console.log("Please ensure the lib is loaded when DOM is loaded."),this.sequencePath=s,this.sequenceStart=i,this.sequenceEnd=a,this.sequenceLength=this.sequenceEnd-this.sequenceStart,this.fileType=o||".png",this.progress=0,this.scrollHeight=document.body.scrollHeight,this.loadCallback=r||function(){},this.onDraw="function"==typeof u?u:null,this.mode=h,this.isPaused=m,this.firstLoopEnd=!1,this.fps=d,this.playOnce=y,this.loadSequence()}},{key:"pause",value:function(){this.isPaused=!0}},{key:"play",value:function(){if(this.isPaused){var e=+new Date;this.startTime=e-this.currentFrame/this.fps*1e3,this.isPaused=!1,this.firstLoopEnd=!1}}},{key:"addLeadingZeros",value:function(e){for(var t=this.sequenceEnd.toString().length,n=(e>0?e:-e)+"",s="",i=t-n.length;i>0;i--)s+="0";return s+=n,e>=0?s:"-"+s}},{key:"loadSequence",value:function(){for(var e=this,t=[],n=this.sequenceStart;n<=this.sequenceEnd;n++){var s=this.addLeadingZeros(n),i=this.sequencePath+s+this.fileType,a=new Image;a.src=i;var o=new Promise(function(e,t){a.onload=e,a.onerror=t});t.push(o),this.sequence.push(a)}Promise.all(t).then(function(){e.renderFrame(),e.loadCallback()})["catch"](function(e){console.log(e)})}},{key:"getNextFrameNumber",value:function(){return Math.min(this.sequenceLength,Math.max(0,Math.round(this.progress*this.sequenceLength)))}},{key:"syncScrollPosition",value:function(){var e=document.body.scrollTop;return e/this.scrollHeight}},{key:"syncAutoPlayPosition",value:function(){var e=+new Date;if(this.startTime||(this.startTime=e),!this.isPaused){var t=this.sequenceLength/this.fps,n=(e-this.startTime)/1e3%t;return n/t}return this.progress}},{key:"syncPlayPosition",value:function(){switch(this.mode){case e.PlayMode.AUTO:this.progress=this.syncAutoPlayPosition();break;case e.PlayMode.MANUAL:break;case e.PlayMode.SCROLL:default:this.progress=this.syncScrollPosition()}}},{key:"setProgress",value:function(e){this.progress=e}},{key:"drawImage",value:function(e){e>=0&&e<this.sequence.length&&(this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.sequence[e].complete?this.context.drawImage(this.sequence[e],0,0,this.canvas.width,this.canvas.height):console.log("The current frame has not been loaded. Please ensure all images are loaded before updating the canvas."))}},{key:"renderFrame",value:function(){var e=this;this.syncPlayPosition(),this.playOnce&&this.firstLoopEnd&&this.pause(),requestAnimationFrame(function(){e.renderFrame()}),this.previousFrame=this.currentFrame,this.currentFrame=this.getNextFrameNumber(),(this.currentFrame!=this.previousFrame||this.firstLoad)&&(this.drawImage(this.currentFrame),this.onDraw&&this.onDraw.call(null,this.previousFrame,this.currentFrame)),this.getNextFrameNumber()===this.sequenceEnd-1&&(this.firstLoopEnd=!0),this.firstLoad=!1}}]),e}();CanvasSequence.PlayMode={SCROLL:"SCROLL",AUTO:"AUTO",MANUAL:"MANUAL"},window.requestAnimationFrame||(window.requestAnimationFrame=function(){return window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e,t){window.setTimeout(e,1e3/60)}}()),"function"==typeof define&&"object"==typeof define.amd&&define.amd?define(function(){return CanvasSequence}):"undefined"!=typeof module&&module.exports?module.exports=CanvasSequence:window.CanvasSequence=CanvasSequence;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhbnZhc1NlcXVlbmNlLmpzIl0sIm5hbWVzIjpbIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwicHJvdG90eXBlIiwiQ2FudmFzU2VxdWVuY2UiLCJjYW52YXNPck9wdHMiLCJzZXF1ZW5jZVBhdGgiLCJzZXF1ZW5jZVN0YXJ0Iiwic2VxdWVuY2VFbmQiLCJmaWxlVHlwZSIsImxvYWRDYWxsYmFjayIsIm9uRHJhdyIsIm1vZGUiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJQbGF5TW9kZSIsIlNDUk9MTCIsImZwcyIsInBsYXlPbmNlIiwidGhpcyIsImN0b3IiLCJjYW52YXMiLCJ2YWx1ZSIsIl9yZWYiLCJfcmVmJG1vZGUiLCJfcmVmJGZwcyIsIl9yZWYkaXNQYXVzZWQiLCJpc1BhdXNlZCIsIl9yZWYkcGxheU9uY2UiLCJzZXF1ZW5jZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsImNvbnNvbGUiLCJsb2ciLCJzZXF1ZW5jZUxlbmd0aCIsInByb2dyZXNzIiwic2Nyb2xsSGVpZ2h0IiwiYm9keSIsImZpcnN0TG9vcEVuZCIsImxvYWRTZXF1ZW5jZSIsIm5vdyIsIkRhdGUiLCJzdGFydFRpbWUiLCJjdXJyZW50RnJhbWUiLCJuIiwidG9TdHJpbmciLCJzdHIiLCJ6ZXJvcyIsIl90aGlzIiwicHJvbWlzZXMiLCJmcmFtZU51bWJlciIsImFkZExlYWRpbmdaZXJvcyIsImZpbGVuYW1lIiwiaW1nIiwiSW1hZ2UiLCJzcmMiLCJwcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJvbmxvYWQiLCJvbmVycm9yIiwicHVzaCIsImFsbCIsInRoZW4iLCJyZW5kZXJGcmFtZSIsImUiLCJNYXRoIiwibWluIiwibWF4Iiwicm91bmQiLCJzY3JvbGxPZmZzZXQiLCJzY3JvbGxUb3AiLCJzZXF1ZW5jZUR1cmF0aW9uIiwicGxheU9mZnNldCIsIkFVVE8iLCJzeW5jQXV0b1BsYXlQb3NpdGlvbiIsIk1BTlVBTCIsInN5bmNTY3JvbGxQb3NpdGlvbiIsImZyYW1lIiwiY2xlYXJSZWN0Iiwid2lkdGgiLCJoZWlnaHQiLCJjb21wbGV0ZSIsImRyYXdJbWFnZSIsIl90aGlzMiIsInN5bmNQbGF5UG9zaXRpb24iLCJwYXVzZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInByZXZpb3VzRnJhbWUiLCJnZXROZXh0RnJhbWVOdW1iZXIiLCJmaXJzdExvYWQiLCJjYWxsIiwid2luZG93Iiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwib1JlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FsbGJhY2siLCJlbGVtZW50Iiwic2V0VGltZW91dCIsImRlZmluZSIsImFtZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLFlBSUEsU0FBU0EsaUJBQWdCQyxFQUFVQyxHQUFlLEtBQU1ELFlBQW9CQyxJQUFnQixLQUFNLElBQUlDLFdBQVUscUNBRmhILEdBQUlDLGNBQWUsV0FBZSxRQUFTQyxHQUFpQkMsRUFBUUMsR0FBUyxJQUFLLEdBQUlDLEdBQUksRUFBR0EsRUFBSUQsRUFBTUUsT0FBUUQsSUFBSyxDQUFFLEdBQUlFLEdBQWFILEVBQU1DLEVBQUlFLEdBQVdDLFdBQWFELEVBQVdDLGFBQWMsRUFBT0QsRUFBV0UsY0FBZSxFQUFVLFNBQVdGLEtBQVlBLEVBQVdHLFVBQVcsR0FBTUMsT0FBT0MsZUFBZVQsRUFBUUksRUFBV00sSUFBS04s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WCxZQUFjLElBQ2xEVyxLQUFLcUIsY0FBZSxHQUd4QnJCLEtBQUswRSxXQUFZLE1BeE9uQnpGLElBZ1BOQSxnQkFBZVcsVUFHWEMsT0FBUSxTQUdSNkQsS0FBUSxPQUlSRSxPQUFRLFVBR1BnQixPQUFPTCx3QkFDUkssT0FBT0wsc0JBQXdCLFdBQzNCLE1BQU9LLFFBQU9DLDZCQUNWRCxPQUFPRSwwQkFDUEYsT0FBT0csd0JBQ1BILE9BQU9JLHlCQUNQLFNBQThDQyxFQUFtQ0MsR0FDN0VOLE9BQU9PLFdBQVdGLEVBQVUsSUFBTyxTQUs3QixrQkFBWEcsU0FBK0MsZ0JBQWZBLFFBQU9DLEtBQW9CRCxPQUFPQyxJQUN6RUQsT0FBTyxXQUNILE1BQU9uRyxrQkFFYyxtQkFBWHFHLFNBQTBCQSxPQUFPQyxRQUMvQ0QsT0FBT0MsUUFBVXRHLGVBRWpCMkYsT0FBTzNGLGVBQWlCQSIsImZpbGUiOiJjYW52YXNTZXF1ZW5jZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIENhbnZhc1NlcXVlbmNlIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBzZWUgY3RvclxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBjYW52YXNPck9wdHMsXHJcbiAgICAgICAgc2VxdWVuY2VQYXRoLFxyXG4gICAgICAgIHNlcXVlbmNlU3RhcnQsXHJcbiAgICAgICAgc2VxdWVuY2VFbmQsXHJcbiAgICAgICAgZmlsZVR5cGUsXHJcbiAgICAgICAgbG9hZENhbGxiYWNrLFxyXG4gICAgICAgIG9uRHJhdyxcclxuICAgICAgICBtb2RlID0gQ2FudmFzU2VxdWVuY2UuUGxheU1vZGUuU0NST0xMLFxyXG4gICAgICAgIGZwcyA9IDI0LFxyXG4gICAgICAgIHBsYXlPbmNlID0gZmFsc2VcclxuICAgICkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgY2FudmFzT3JPcHRzID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAvLyBmaXJzdCBwYXJhbSBpcyBhbiBvYmplY3Qgb2Ygb3B0aW9uc1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jdG9yKGNhbnZhc09yT3B0cyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmN0b3Ioe1xyXG4gICAgICAgICAgICBjYW52YXM6IGNhbnZhc09yT3B0cyxcclxuICAgICAgICAgICAgc2VxdWVuY2VQYXRoLFxyXG4gICAgICAgICAgICBzZXF1ZW5jZVN0YXJ0LFxyXG4gICAgICAgICAgICBzZXF1ZW5jZUVuZCxcclxuICAgICAgICAgICAgZmlsZVR5cGUsXHJcbiAgICAgICAgICAgIGxvYWRDYWxsYmFjayxcclxuICAgICAgICAgICAgb25EcmF3LFxyXG4gICAgICAgICAgICBtb2RlLFxyXG4gICAgICAgICAgICBmcHMsXHJcbiAgICAgICAgICAgIHBsYXlPbmNlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBvcHRzLmZpbGVUeXBlIHtTdHJpbmd9IC0gdGhlIGZpbGUgZXh0ZW5zaW9uIHlvdSB3YW50IHRvIHVzZSAoZXguXHJcbiAgICAgKiAnanBnJylcclxuICAgICAqIEBwYXJhbSBvcHRzLmxvYWRDYWxsYmFjayB7ZnVuY3Rpb259IC0gYSBjYWxsYmFjayB0byBiZSBub3RpZmllZCB3aGVuIGFsbFxyXG4gICAgICogaW1hZ2VzIGFyZSBsb2FkZWQgYW5kIHJlYWR5IHRvIHVzZVxyXG4gICAgICogQHBhcmFtIG9wdHMub25EcmF3IHtmdW5jdGlvbihwcmV2aW91c0ZyYW1lOkludCwgY3VycmVudEZyYW1lOkludClgfSAtIGFcclxuICAgICAqIGNhbGxiYWNrIHRvIGJlIG5vdGlmaWVkIHdoZW4gdGhlIGRyYXduIGZyYW1lIGNoYW5nZXNcclxuICAgICAqIEBwYXJhbSBbb3B0cy5tb2RlXSB7U3RyaW5nfSAtIERlZmF1bHRzIHRvIGAnU0NST0xMJ2AuIE1ldGhvZCB0byB1c2UgZm9yXHJcbiAgICAgKiBjb250cm9sbGluZyBwbGF5YmFjayBvZiB0aGUgc2VxdWVuY2VcclxuICAgICAqIFNlZSBgQ2FudmFzU2VxdWVuY2UuUGxheU1vZGVgIGZvciBmdWxsIGxpc3Qgb2Ygc3VwcG9ydGVkIHBsYXkgbW9kZXNcclxuICAgICAqIEBwYXJhbSBvcHRzLmZwcyB7TnVtYmVyfSAtIERlZmF1bHRzIHRvIGAyNGAuIEZyYW1lcyBwZXIgc2Vjb25kIHRvIHVzZSBmb3JcclxuICAgICAqIEBwYXJhbSBvcHRzLmlzUGF1c2VkIHtOdW1iZXJ9IC0gRGVmYXVsdHMgdG8gYGZhbHNlYC4gYHRydWVgIHRvIGluaXRpYWxpemVcclxuICAgICAqIHdpdGggcGF1c2VkIGF1dG8gcGxheWJhY2sgc3RhdGUuXHJcbiAgICAgKiBAcGFyYW0gb3B0cy5wbGF5T25jZSB7Qm9vbGVhbn0gLSBEZWZhdWx0cyB0byBgZmFsc2VgLiBhIGZsYWcgdG8gbWFrZSB0aGVcclxuICAgICAqIHNlcXVlbmNlIHBsYXkgb25seSBvbmNlXHJcbiAgICAgKi9cclxuICAgIGN0b3Ioe1xyXG4gICAgICBjYW52YXMsXHJcbiAgICAgIHNlcXVlbmNlUGF0aCxcclxuICAgICAgc2VxdWVuY2VTdGFydCxcclxuICAgICAgc2VxdWVuY2VFbmQsXHJcbiAgICAgIGZpbGVUeXBlLFxyXG4gICAgICBsb2FkQ2FsbGJhY2ssXHJcbiAgICAgIG9uRHJhdyxcclxuICAgICAgbW9kZSA9IENhbnZhc1NlcXVlbmNlLlBsYXlNb2RlLlNDUk9MTCxcclxuICAgICAgZnBzID0gMjQsXHJcbiAgICAgIGlzUGF1c2VkID0gZmFsc2UsXHJcbiAgICAgIHBsYXlPbmNlID0gZmFsc2VcclxuICAgIH0pIHtcclxuICAgICAgICB0aGlzLnNlcXVlbmNlID0gW107XHJcblxyXG4gICAgICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY2FudmFzKTtcclxuXHJcbiAgICAgICAgaWYodGhpcy5jYW52YXMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlBsZWFzZSBlbnN1cmUgdGhlIGxpYiBpcyBsb2FkZWQgd2hlbiBET00gaXMgbG9hZGVkLlwiKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zZXF1ZW5jZVBhdGggPSBzZXF1ZW5jZVBhdGg7XHJcbiAgICAgICAgdGhpcy5zZXF1ZW5jZVN0YXJ0ID0gc2VxdWVuY2VTdGFydDtcclxuICAgICAgICB0aGlzLnNlcXVlbmNlRW5kID0gc2VxdWVuY2VFbmQ7XHJcbiAgICAgICAgdGhpcy5zZXF1ZW5jZUxlbmd0aCA9IHRoaXMuc2VxdWVuY2VFbmQgLSB0aGlzLnNlcXVlbmNlU3RhcnQ7XHJcblxyXG4gICAgICAgIHRoaXMuZmlsZVR5cGUgPSBmaWxlVHlwZSB8fCAnLnBuZyc7XHJcblxyXG4gICAgICAgIHRoaXMucHJvZ3Jlc3MgPSAwO1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsSGVpZ2h0ID0gZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5sb2FkQ2FsbGJhY2sgPSBsb2FkQ2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcclxuICAgICAgICB0aGlzLm9uRHJhdyA9IHR5cGVvZiBvbkRyYXcgPT09ICdmdW5jdGlvbicgPyBvbkRyYXcgOiBudWxsO1xyXG4gICAgICAgIHRoaXMubW9kZSA9IG1vZGU7XHJcbiAgICAgICAgdGhpcy5pc1BhdXNlZCA9IGlzUGF1c2VkO1xyXG4gICAgICAgIHRoaXMuZmlyc3RMb29wRW5kID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5mcHMgPSBmcHM7XHJcbiAgICAgICAgdGhpcy5wbGF5T25jZSA9IHBsYXlPbmNlO1xyXG5cclxuICAgICAgICB0aGlzLmxvYWRTZXF1ZW5jZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHBhdXNlKCkge1xyXG4gICAgICAgIHRoaXMuaXNQYXVzZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHBsYXkoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzUGF1c2VkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHJlc2V0IHN0YXJ0VGltZSBzbyB0aGF0IGl0IGlzIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50IHJlcGxheSB0aW1lXHJcbiAgICAgICAgY29uc3Qgbm93ID0gK25ldyBEYXRlKCk7XHJcbiAgICAgICAgdGhpcy5zdGFydFRpbWUgPSBub3cgLSAodGhpcy5jdXJyZW50RnJhbWUgLyB0aGlzLmZwcyAqIDEwMDApXHJcbiAgICAgICAgdGhpcy5pc1BhdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZmlyc3RMb29wRW5kID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkTGVhZGluZ1plcm9zKG4pIHtcclxuICAgICAgICB2YXIgbGVuZ3RoID0gdGhpcy5zZXF1ZW5jZUVuZC50b1N0cmluZygpLmxlbmd0aDtcclxuICAgICAgICB2YXIgc3RyID0gKG4gPiAwID8gbiA6IC1uKSArIFwiXCI7XHJcbiAgICAgICAgdmFyIHplcm9zID0gXCJcIjtcclxuICAgICAgICBmb3IgKHZhciBpID0gbGVuZ3RoIC0gc3RyLmxlbmd0aDsgaSA+IDA7IGktLSlcclxuICAgICAgICAgICAgemVyb3MgKz0gXCIwXCI7XHJcbiAgICAgICAgemVyb3MgKz0gc3RyO1xyXG4gICAgICAgIHJldHVybiBuID49IDAgPyB6ZXJvcyA6IFwiLVwiICsgemVyb3M7XHJcbiAgICB9XHJcblxyXG4gICAgbG9hZFNlcXVlbmNlKCkge1xyXG4gICAgICAgIHZhciBwcm9taXNlcyA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5zZXF1ZW5jZVN0YXJ0OyBpIDw9IHRoaXMuc2VxdWVuY2VFbmQ7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgZnJhbWVOdW1iZXIgPSB0aGlzLmFkZExlYWRpbmdaZXJvcyhpKTtcclxuICAgICAgICAgICAgdmFyIGZpbGVuYW1lID0gdGhpcy5zZXF1ZW5jZVBhdGggKyBmcmFtZU51bWJlciArIHRoaXMuZmlsZVR5cGU7XHJcbiAgICAgICAgICAgIHZhciBpbWcgPSBuZXcgSW1hZ2U7XHJcbiAgICAgICAgICAgIGltZy5zcmMgPSBmaWxlbmFtZTtcclxuXHJcbiAgICAgICAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBpbWcub25sb2FkID0gcmVzb2x2ZTtcclxuICAgICAgICAgICAgICAgIGltZy5vbmVycm9yID0gcmVqZWN0O1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2gocHJvbWlzZSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNlcXVlbmNlLnB1c2goaW1nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJGcmFtZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRDYWxsYmFjaygpO1xyXG4gICAgICAgIH0pLmNhdGNoKChlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE5leHRGcmFtZU51bWJlcigpIHtcclxuICAgICAgcmV0dXJuIE1hdGgubWluKFxyXG4gICAgICAgIHRoaXMuc2VxdWVuY2VMZW5ndGgsXHJcbiAgICAgICAgTWF0aC5tYXgoXHJcbiAgICAgICAgICAwLFxyXG4gICAgICAgICAgTWF0aC5yb3VuZCh0aGlzLnByb2dyZXNzICogdGhpcy5zZXF1ZW5jZUxlbmd0aClcclxuICAgICAgICApXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgc3luY1Njcm9sbFBvc2l0aW9uKCkge1xyXG4gICAgICAgIGNvbnN0IHNjcm9sbE9mZnNldCA9IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wO1xyXG4gICAgICAgIHJldHVybiBzY3JvbGxPZmZzZXQgLyB0aGlzLnNjcm9sbEhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBzeW5jQXV0b1BsYXlQb3NpdGlvbigpIHtcclxuICAgICAgICBjb25zdCBub3cgPSArbmV3IERhdGUoKTtcclxuICAgICAgICBpZiAoIXRoaXMuc3RhcnRUaW1lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRUaW1lID0gbm93O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmlzUGF1c2VkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlcXVlbmNlRHVyYXRpb24gPSB0aGlzLnNlcXVlbmNlTGVuZ3RoIC8gdGhpcy5mcHM7XHJcbiAgICAgICAgICAgIC8vIE1vZHVsbyB0byBsb29wXHJcbiAgICAgICAgICAgIGNvbnN0IHBsYXlPZmZzZXQgPSAoKG5vdyAtIHRoaXMuc3RhcnRUaW1lKSAvIDEwMDApICUgc2VxdWVuY2VEdXJhdGlvbjtcclxuICAgICAgICAgICAgcmV0dXJuIHBsYXlPZmZzZXQgLyBzZXF1ZW5jZUR1cmF0aW9uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvZ3Jlc3M7XHJcbiAgICB9XHJcblxyXG4gICAgc3luY1BsYXlQb3NpdGlvbigpIHtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMubW9kZSkge1xyXG4gICAgICAgICAgICBjYXNlIENhbnZhc1NlcXVlbmNlLlBsYXlNb2RlLkFVVE86IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3MgPSB0aGlzLnN5bmNBdXRvUGxheVBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2FzZSBDYW52YXNTZXF1ZW5jZS5QbGF5TW9kZS5NQU5VQUw6XHJcbiAgICAgICAgICAgICAgICAvLyBEbyBOb3RoaW5nXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgQ2FudmFzU2VxdWVuY2UuUGxheU1vZGUuU0NST0xMOlxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyA9IHRoaXMuc3luY1Njcm9sbFBvc2l0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldFByb2dyZXNzKHByb2dyZXNzKSB7XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzcyA9IHByb2dyZXNzO1xyXG4gICAgfVxyXG5cclxuICAgIGRyYXdJbWFnZShmcmFtZSkge1xyXG4gICAgICAgIGlmKGZyYW1lID49IDAgJiYgZnJhbWUgPCB0aGlzLnNlcXVlbmNlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgICAgICBpZih0aGlzLnNlcXVlbmNlW2ZyYW1lXS5jb21wbGV0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLnNlcXVlbmNlW2ZyYW1lXSwgMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRoZSBjdXJyZW50IGZyYW1lIGhhcyBub3QgYmVlbiBsb2FkZWQuIFBsZWFzZSBlbnN1cmUgYWxsIGltYWdlcyBhcmUgbG9hZGVkIGJlZm9yZSB1cGRhdGluZyB0aGUgY2FudmFzLlwiKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckZyYW1lKCkge1xyXG4gICAgICAgIHRoaXMuc3luY1BsYXlQb3NpdGlvbigpO1xyXG4gICAgICAgIGlmICggdGhpcy5wbGF5T25jZSAmJiB0aGlzLmZpcnN0TG9vcEVuZCApIHtcclxuICAgICAgICAgICAgdGhpcy5wYXVzZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJGcmFtZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnByZXZpb3VzRnJhbWUgPSB0aGlzLmN1cnJlbnRGcmFtZTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRGcmFtZSA9IHRoaXMuZ2V0TmV4dEZyYW1lTnVtYmVyKCk7XHJcblxyXG4gICAgICAgIGlmICgodGhpcy5jdXJyZW50RnJhbWUgIT0gdGhpcy5wcmV2aW91c0ZyYW1lKSB8fCB0aGlzLmZpcnN0TG9hZCkge1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdJbWFnZSh0aGlzLmN1cnJlbnRGcmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMub25EcmF3ICYmIHRoaXMub25EcmF3LmNhbGwobnVsbCwgdGhpcy5wcmV2aW91c0ZyYW1lLCB0aGlzLmN1cnJlbnRGcmFtZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIHRoaXMuZ2V0TmV4dEZyYW1lTnVtYmVyKCkgPT09IHRoaXMuc2VxdWVuY2VFbmQgLSAxICkge1xyXG4gICAgICAgICAgICB0aGlzLmZpcnN0TG9vcEVuZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmZpcnN0TG9hZCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIFN1cHBvcnRlZCBwbGF5YmFjayBjb250cm9sIG9wdGlvbnNcclxuICovXHJcbkNhbnZhc1NlcXVlbmNlLlBsYXlNb2RlID0ge1xyXG4gICAgLy8gU0NST0xMIC0gKERlZmF1bHQpIHByb2dyZXNzIGlzIGJvdW5kIHRvIHNjcm9sbCBwb3NpdGlvbiByZWxhdGl2ZSB0byBoZWlnaHRcclxuICAgIC8vIG9mIGRvY3VtZW50XHJcbiAgICBTQ1JPTEw6ICdTQ1JPTEwnLFxyXG5cclxuICAgIC8vIEFVVE8gLSBub3QgYm91bmQgdG8gc2Nyb2xsLCBwbGF5cyBsaWtlIGEgcmVndWxhciB2aWRlb1xyXG4gICAgQVVUTyAgOiAnQVVUTycsXHJcblxyXG4gICAgLy8gTUFOVUFMIC0gcGxheWJhY2sgbWFuYWdlbWVudCBpcyBsZWZ0IHRvIHRoZSBvd25lci4gRnJhbWUgaXMgdXBkYXRhYmxlIHdpdGhcclxuICAgIC8vIGAuc2V0UHJvZ3Jlc3NgIG1ldGhvZC5cclxuICAgIE1BTlVBTDogJ01BTlVBTCdcclxufVxyXG5cclxuaWYgKCF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XHJcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgICAgICAgIHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgLy8gY29tbWVudCBvdXQgaWYgRkY0IGlzIHNsb3cgKGl0IGNhcHMgZnJhbWVyYXRlIGF0IH4zMGZwczogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjMwMTI3KVxyXG4gICAgICAgICAgICB3aW5kb3cub1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICAgICAgICB3aW5kb3cubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgICAgICAgZnVuY3Rpb24oIC8qIGZ1bmN0aW9uIEZyYW1lUmVxdWVzdENhbGxiYWNrICovIGNhbGxiYWNrLCAvKiBET01FbGVtZW50IEVsZW1lbnQgKi8gZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssIDEwMDAgLyA2MCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICB9KSgpO1xyXG59XHJcblxyXG5pZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBDYW52YXNTZXF1ZW5jZTtcclxuICAgIH0pO1xyXG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IENhbnZhc1NlcXVlbmNlO1xyXG59IGVsc2Uge1xyXG4gICAgd2luZG93LkNhbnZhc1NlcXVlbmNlID0gQ2FudmFzU2VxdWVuY2U7XHJcbn1cclxuIl19
