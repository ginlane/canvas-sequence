"use strict";function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(n,t,i){return t&&e(n.prototype,t),i&&e(n,i),n}}(),CanvasSequence=function(){function e(n,t,i,s,a,o){_classCallCheck(this,e),this.sequence=[],this.canvas=document.getElementById(n),null!==this.canvas?this.context=this.canvas.getContext("2d"):console.log("Please ensure the lib is loaded when DOM is loaded."),this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.sequencePath=t,this.sequenceStart=i,this.sequenceEnd=s,this.sequenceLength=this.sequenceEnd-this.sequenceStart,this.fileType=a||".png",this.scrollHeight=document.body.scrollHeight,this.scrollOffset=document.body.scrollTop,this.clientHeight=window.innerHeight,this.loadCallback=o||function(){},this.loadSequence()}return _createClass(e,[{key:"addLeadingZeros",value:function(e){for(var n=this.sequenceEnd.toString().length,t=(e>0?e:-e)+"",i="",s=n-t.length;s>0;s--)i+="0";return i+=t,e>=0?i:"-"+i}},{key:"loadSequence",value:function(){for(var e=this,n=[],t=this.sequenceStart;t<=this.sequenceEnd;t++){var i=this.addLeadingZeros(t),s=this.sequencePath+i+this.fileType,a=new Image;a.src=s;var o=new Promise(function(e,n){a.onload=e,a.onerror=n});n.push(o),this.sequence.push(a)}Promise.all(n).then(function(){e.renderFrame()})["catch"](function(e){console.log(e)})}},{key:"getNextFrameNumber",value:function(){var e=this.scrollOffset/(this.scrollHeight-this.clientHeight)*100,n=Math.round(e*this.sequenceLength/100);return n}},{key:"syncScrollPosition",value:function(){this.scrollOffset=document.body.scrollTop}},{key:"drawImage",value:function(e){e>=0&&e<this.sequence.length&&(this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.sequence[e].complete?this.context.drawImage(this.sequence[e],0,0,this.canvas.width,this.canvas.height):console.log("The current frame has not been loaded. Please ensure all images are loaded before updating the canvas."))}},{key:"renderFrame",value:function(){var e=this;this.syncScrollPosition(),requestAnimationFrame(function(){e.renderFrame()}),this.previousFrame=this.currentFrame,this.currentFrame=this.getNextFrameNumber(),(this.currentFrame!=this.previousFrame||this.firstLoad)&&this.drawImage(this.currentFrame),this.firstLoad=!1}}]),e}();window.requestAnimationFrame||(window.requestAnimationFrame=function(){return window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e,n){window.setTimeout(e,1e3/60)}}()),"function"==typeof define&&define.amd?define("CanvasSequence",CanvasSequence):"undefined"!=typeof module&&module.exports?module.exports=CanvasSequence:window.CanvasSequence=CanvasSequence;
//# sourceMappingURL=data:application/json;base64,